namespace com.ibm.streamsx.inet.http.tests;

composite HTTPPostBasicFunctionTestMain {
	param
		expression<rstring> $baseUrl : getSubmissionTimeValue("baseUrl");		
		                                                                                      
	graph
		
		stream<rstring name> InputStream = Beacon() {
			param
				iterations : 1;
			output InputStream : name = "myname";
		}	
		
		stream<com.ibm.streamsx.inet.http::HTTPResponse> HTTPPostResponse
			= com.ibm.streamsx.inet.http::HTTPPost(InputStream) {
			param
				url : $baseUrl + "/streamtest/streamtest"; 
		}
		stream<uint32 val> CheckStream = Beacon() {
			param
				iterations : 1;
				initDelay : 5.0;
			output CheckStream : val =0u;
		}	
		
		() as SinkOp = Custom(HTTPPostResponse; CheckStream) {
			logic 
				state : {mutable uint32 dataCount = 0u;}
				onTuple HTTPPostResponse : {
					println(HTTPPostResponse);
					assert(HTTPPostResponse.data == "name=myname", "TEST_ERROR: Data did not get transmitted properly, found: " + HTTPPostResponse.data );
					dataCount++;
				}
				onTuple CheckStream : {
					assert(dataCount == 1u, "TEST_ERROR: Data Count check failed. Found: " + (rstring)dataCount + ", Expected: 1");
					println("Counts verified");
				}
		}

}